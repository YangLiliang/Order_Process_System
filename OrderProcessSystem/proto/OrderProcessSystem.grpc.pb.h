// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: OrderProcessSystem.proto
#ifndef GRPC_OrderProcessSystem_2eproto__INCLUDED
#define GRPC_OrderProcessSystem_2eproto__INCLUDED

#include "OrderProcessSystem.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace OPS {

class OrderService final {
 public:
  static constexpr char const* service_full_name() {
    return "OPS.OrderService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>> PushNewOrder(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>>(PushNewOrderRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>> AsyncPushNewOrder(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>>(AsyncPushNewOrderRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>> PrepareAsyncPushNewOrder(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>>(PrepareAsyncPushNewOrderRaw(context, cq));
    }
    virtual ::grpc::Status PushCancelOrder(::grpc::ClientContext* context, const ::OPS::CancelOrderRequest& request, ::OPS::ExecutionReport* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OPS::ExecutionReport>> AsyncPushCancelOrder(::grpc::ClientContext* context, const ::OPS::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OPS::ExecutionReport>>(AsyncPushCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OPS::ExecutionReport>> PrepareAsyncPushCancelOrder(::grpc::ClientContext* context, const ::OPS::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::OPS::ExecutionReport>>(PrepareAsyncPushCancelOrderRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>* PushNewOrderRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>* AsyncPushNewOrderRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>* PrepareAsyncPushNewOrderRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OPS::ExecutionReport>* AsyncPushCancelOrderRaw(::grpc::ClientContext* context, const ::OPS::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::OPS::ExecutionReport>* PrepareAsyncPushCancelOrderRaw(::grpc::ClientContext* context, const ::OPS::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>> PushNewOrder(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>>(PushNewOrderRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>> AsyncPushNewOrder(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>>(AsyncPushNewOrderRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>> PrepareAsyncPushNewOrder(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>>(PrepareAsyncPushNewOrderRaw(context, cq));
    }
    ::grpc::Status PushCancelOrder(::grpc::ClientContext* context, const ::OPS::CancelOrderRequest& request, ::OPS::ExecutionReport* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OPS::ExecutionReport>> AsyncPushCancelOrder(::grpc::ClientContext* context, const ::OPS::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OPS::ExecutionReport>>(AsyncPushCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OPS::ExecutionReport>> PrepareAsyncPushCancelOrder(::grpc::ClientContext* context, const ::OPS::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::OPS::ExecutionReport>>(PrepareAsyncPushCancelOrderRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReaderWriter< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>* PushNewOrderRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>* AsyncPushNewOrderRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::OPS::NewOrderRequest, ::OPS::ExecutionReport>* PrepareAsyncPushNewOrderRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OPS::ExecutionReport>* AsyncPushCancelOrderRaw(::grpc::ClientContext* context, const ::OPS::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::OPS::ExecutionReport>* PrepareAsyncPushCancelOrderRaw(::grpc::ClientContext* context, const ::OPS::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PushNewOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_PushCancelOrder_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PushNewOrder(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::OPS::ExecutionReport, ::OPS::NewOrderRequest>* stream);
    virtual ::grpc::Status PushCancelOrder(::grpc::ServerContext* context, const ::OPS::CancelOrderRequest* request, ::OPS::ExecutionReport* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PushNewOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PushNewOrder() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PushNewOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushNewOrder(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::OPS::ExecutionReport, ::OPS::NewOrderRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushNewOrder(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::OPS::ExecutionReport, ::OPS::NewOrderRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushCancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PushCancelOrder() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PushCancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCancelOrder(::grpc::ServerContext* context, const ::OPS::CancelOrderRequest* request, ::OPS::ExecutionReport* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushCancelOrder(::grpc::ServerContext* context, ::OPS::CancelOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::OPS::ExecutionReport>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PushNewOrder<WithAsyncMethod_PushCancelOrder<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_PushNewOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PushNewOrder() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PushNewOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushNewOrder(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::OPS::ExecutionReport, ::OPS::NewOrderRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushCancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PushCancelOrder() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PushCancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCancelOrder(::grpc::ServerContext* context, const ::OPS::CancelOrderRequest* request, ::OPS::ExecutionReport* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushCancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PushCancelOrder() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::OPS::CancelOrderRequest, ::OPS::ExecutionReport>(std::bind(&WithStreamedUnaryMethod_PushCancelOrder<BaseClass>::StreamedPushCancelOrder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PushCancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushCancelOrder(::grpc::ServerContext* context, const ::OPS::CancelOrderRequest* request, ::OPS::ExecutionReport* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushCancelOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::OPS::CancelOrderRequest,::OPS::ExecutionReport>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PushCancelOrder<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PushCancelOrder<Service > StreamedService;
};

}  // namespace OPS


#endif  // GRPC_OrderProcessSystem_2eproto__INCLUDED
